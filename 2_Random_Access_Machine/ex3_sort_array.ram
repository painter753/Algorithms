<input> 5 4 3 0 2 1
; <input> 8 0 1 2 3 4 5 6 7
; <input> 8 7 6 5 4 3 2 1 0
; <input> 0
; <input> 1 8
; <input> 7 7 7 7 7 7 7 7

read 0
jz exit 

; init for get elements
store 1 ; array.length
store 2 ; element counter

load =10 
store 3 ; pointer to current element
store 8 ; first element position for array elements

; init for sort elements
load 3
store 4 ; start i-index / first element position for array elements for iterator
load 1
add 3
store 6 ; first empty position after array elements [EP]

; filling
loop:
	read *3
	
	load 3 ; store current element to current reg
	add =1
	store 3
		  
	load 2 ; decrease remaining elements counter
	sub =1
	store 2 
jgtz loop 

; check if array.length == 1
load 1
sub =1
jz loop_output

; sorting
loop_outer:	
	
	; k = i + 1
	load 4 
	add =1
	store 5
	
	loop_inner:
		; if (array[i] > array[k]) -> swap
		load *4
		sub *5
		jgtz swap
		jmp no_swap
		
		swap:
		load *4 
		store 7
		load *5
		store *4
		load 7
		store *5
			
		no_swap:			
		
		; k++
		load 5
		add =1
		store 5

		; if (k == EP) end loop
		load 6 
		sub 5
		jz end_inner_loop 		
			
	jgtz loop_inner	
	end_inner_loop:	

	; i++
	load 4
	add =1
	store 4

	; if (i == EP - 1) end loop
	load 6 
	sub 4
	sub =1	
jgtz loop_outer

; write to output

loop_output:
	write *8

	load 8
	add =1 
	store 8
	 
	load 6 
	sub 8 
jgtz loop_output


exit:
halt